// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package links

import (
	"context"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links(
  name, link
) VALUES (
  ?, ?
)
RETURNING id, name, link
`

type CreateLinkParams struct {
	Name string
	Link string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.Name, arg.Link)
	var i Link
	err := row.Scan(&i.ID, &i.Name, &i.Link)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM links
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, name, link FROM links 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetLink(ctx context.Context, id int64) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLink, id)
	var i Link
	err := row.Scan(&i.ID, &i.Name, &i.Link)
	return i, err
}

const listLinks = `-- name: ListLinks :many
SELECT id, name, link FROM links
ORDER BY name
`

func (q *Queries) ListLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(&i.ID, &i.Name, &i.Link); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :exec
UPDATE links
set name = ?,
link = ?
WHERE id = ?
`

type UpdateLinkParams struct {
	Name string
	Link string
	ID   int64
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateLink, arg.Name, arg.Link, arg.ID)
	return err
}
